/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vectara from "../../api/index";
import * as core from "../../core";

export const QueryHistorySummary: core.serialization.ObjectSchema<
    serializers.QueryHistorySummary.Raw,
    Vectara.QueryHistorySummary
> = core.serialization.object({
    id: core.serialization.string().optional(),
    query: core.serialization.string().optional(),
    corpusKey: core.serialization.property("corpus_key", core.serialization.string().optional()),
    startedAt: core.serialization.property("started_at", core.serialization.date().optional()),
    latencyMillis: core.serialization.property("latency_millis", core.serialization.number().optional()),
    chatId: core.serialization.property("chat_id", core.serialization.string().optional()),
    generation: core.serialization.string().optional(),
    factualConsistencyScore: core.serialization.property(
        "factual_consistency_score",
        core.serialization.number().optional()
    ),
});

export declare namespace QueryHistorySummary {
    interface Raw {
        id?: string | null;
        query?: string | null;
        corpus_key?: string | null;
        started_at?: string | null;
        latency_millis?: number | null;
        chat_id?: string | null;
        generation?: string | null;
        factual_consistency_score?: number | null;
    }
}
