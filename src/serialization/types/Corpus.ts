/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vectara from "../../api/index";
import * as core from "../../core";
import { CorpusKey } from "./CorpusKey";
import { FilterAttribute } from "./FilterAttribute";
import { CorpusCustomDimension } from "./CorpusCustomDimension";
import { CorpusLimits } from "./CorpusLimits";

export const Corpus: core.serialization.ObjectSchema<serializers.Corpus.Raw, Vectara.Corpus> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        key: CorpusKey.optional(),
        name: core.serialization.string().optional(),
        description: core.serialization.string().optional(),
        enabled: core.serialization.boolean().optional(),
        chatHistoryCorpus: core.serialization.property("chat_history_corpus", core.serialization.boolean().optional()),
        queriesAreAnswers: core.serialization.property("queries_are_answers", core.serialization.boolean().optional()),
        documentsAreQuestions: core.serialization.property(
            "documents_are_questions",
            core.serialization.boolean().optional()
        ),
        encoderId: core.serialization.property("encoder_id", core.serialization.string().optional()),
        filterAttributes: core.serialization.property(
            "filter_attributes",
            core.serialization.list(FilterAttribute).optional()
        ),
        customDimensions: core.serialization.property(
            "custom_dimensions",
            core.serialization.list(CorpusCustomDimension).optional()
        ),
        limits: CorpusLimits.optional(),
        createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
    });

export declare namespace Corpus {
    interface Raw {
        id?: string | null;
        key?: CorpusKey.Raw | null;
        name?: string | null;
        description?: string | null;
        enabled?: boolean | null;
        chat_history_corpus?: boolean | null;
        queries_are_answers?: boolean | null;
        documents_are_questions?: boolean | null;
        encoder_id?: string | null;
        filter_attributes?: FilterAttribute.Raw[] | null;
        custom_dimensions?: CorpusCustomDimension.Raw[] | null;
        limits?: CorpusLimits.Raw | null;
        created_at?: string | null;
    }
}
