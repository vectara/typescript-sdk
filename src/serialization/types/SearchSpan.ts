/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vectara from "../../api/index";
import * as core from "../../core";
import { IndividualSearchResult } from "./IndividualSearchResult";

export const SearchSpan: core.serialization.ObjectSchema<serializers.SearchSpan.Raw, Vectara.SearchSpan> =
    core.serialization.object({
        type: core.serialization.stringLiteral("search"),
        latencyMillis: core.serialization.property("latency_millis", core.serialization.number().optional()),
        startedAt: core.serialization.property("started_at", core.serialization.date().optional()),
        searchResults: core.serialization.property(
            "search_results",
            core.serialization.list(IndividualSearchResult).optional()
        ),
    });

export declare namespace SearchSpan {
    interface Raw {
        type: "search";
        latency_millis?: number | null;
        started_at?: string | null;
        search_results?: IndividualSearchResult.Raw[] | null;
    }
}
