/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Vectara from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Corpora {
    export interface Options {
        environment?: core.Supplier<environments.VectaraEnvironment | environments.VectaraEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the x-api-key header */
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

/**
 * Create, manage, and update corpora and their associated settings
 */
export class Corpora {
    protected readonly _options: Corpora.Options;

    constructor(_options: Corpora.Options = {}) {
        this._options = _options;
    }

    /**
     * List corpora in the account. The returned corpus objects contain less detail compared to those retrieved the direct corpus retrieval operation.
     *
     * @param {Vectara.CorporaListRequest} request
     * @param {Corpora.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vectara.ForbiddenError}
     *
     * @example
     *     await client.corpora.list()
     */
    public async list(
        request: Vectara.CorporaListRequest = {},
        requestOptions?: Corpora.RequestOptions,
    ): Promise<core.Page<Vectara.Corpus>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (request: Vectara.CorporaListRequest): Promise<core.WithRawResponse<Vectara.ListCorporaResponse>> => {
                const {
                    limit,
                    filter,
                    corpus_id: corpusId,
                    page_key: pageKey,
                    "Request-Timeout": requestTimeout,
                    "Request-Timeout-Millis": requestTimeoutMillis,
                } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (limit != null) {
                    _queryParams["limit"] = limit.toString();
                }
                if (filter != null) {
                    _queryParams["filter"] = filter;
                }
                if (corpusId != null) {
                    if (Array.isArray(corpusId)) {
                        _queryParams["corpus_id"] = corpusId.map((item) => item);
                    } else {
                        _queryParams["corpus_id"] = corpusId;
                    }
                }
                if (pageKey != null) {
                    _queryParams["page_key"] = pageKey;
                }
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (
                                (await core.Supplier.get(this._options.environment)) ??
                                environments.VectaraEnvironment.Production
                            ).default,
                        "v2/corpora",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "Request-Timeout": requestTimeout != null ? requestTimeout.toString() : undefined,
                            "Request-Timeout-Millis":
                                requestTimeoutMillis != null ? requestTimeoutMillis.toString() : undefined,
                            "x-api-key": requestOptions?.apiKey,
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return { data: _response.body as Vectara.ListCorporaResponse, rawResponse: _response.rawResponse };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 403:
                            throw new Vectara.ForbiddenError(
                                _response.error.body as Vectara.Error_,
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.VectaraError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.VectaraError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.VectaraTimeoutError("Timeout exceeded when calling GET /v2/corpora.");
                    case "unknown":
                        throw new errors.VectaraError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Vectara.ListCorporaResponse, Vectara.Corpus>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.metadata?.page_key != null &&
                !(typeof response?.metadata?.page_key === "string" && response?.metadata?.page_key === ""),
            getItems: (response) => response?.corpora ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "page_key", response?.metadata?.page_key));
            },
        });
    }

    /**
     * Create a corpus, which is a container to store documents and associated metadata. Here, you define the unique `corpus_key` that identifies the corpus. The `corpus_key` can be custom-defined following your preferred naming convention, allowing you to easily manage the corpus's data and reference it in queries. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).
     *
     * @param {Vectara.CreateCorpusRequest} request
     * @param {Corpora.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vectara.BadRequestError}
     * @throws {@link Vectara.ForbiddenError}
     * @throws {@link Vectara.ConflictError}
     *
     * @example
     *     await client.corpora.create({
     *         key: "fin_esg_docs",
     *         name: "EU Bank ESG Compliance",
     *         description: "A corpus for storing and querying financial documents, such as annual reports and ESG compliance filings, for European banks in 2023.",
     *         save_history: true,
     *         encoder_name: "boomerang-2023-q3",
     *         filter_attributes: [{
     *                 name: "industry",
     *                 level: "part",
     *                 description: "The industry sector of the document (banking).",
     *                 indexed: true,
     *                 type: "text"
     *             }, {
     *                 name: "region",
     *                 level: "part",
     *                 description: "The geographical region of the document (EU).",
     *                 indexed: true,
     *                 type: "text"
     *             }, {
     *                 name: "year",
     *                 level: "part",
     *                 description: "The publication year of the document (2023).",
     *                 indexed: true,
     *                 type: "integer"
     *             }, {
     *                 name: "doc_type",
     *                 level: "part",
     *                 description: "The type of document (annual_report).",
     *                 indexed: true,
     *                 type: "text"
     *             }]
     *     })
     *
     * @example
     *     await client.corpora.create({
     *         key: "legal_ip_cases",
     *         name: "California IP Case Law",
     *         description: "A corpus for indexing and searching legal documents related to intellectual property rights cases in California, including court rulings and contracts.",
     *         save_history: true,
     *         encoder_name: "boomerang-2023-q3",
     *         filter_attributes: [{
     *                 name: "jurisdiction",
     *                 level: "part",
     *                 description: "The legal jurisdiction of the document (California).",
     *                 indexed: true,
     *                 type: "text"
     *             }, {
     *                 name: "legal_domain",
     *                 level: "part",
     *                 description: "The legal domain of the document (IP).",
     *                 indexed: true,
     *                 type: "text"
     *             }, {
     *                 name: "year",
     *                 level: "part",
     *                 description: "The year of the case or document (2023).",
     *                 indexed: true,
     *                 type: "integer"
     *             }, {
     *                 name: "case_name",
     *                 level: "part",
     *                 description: "The name of the legal case (TechCo v. Ex-Employee).",
     *                 indexed: true,
     *                 type: "text"
     *             }]
     *     })
     *
     * @example
     *     await client.corpora.create({
     *         key: "support_web_portal",
     *         name: "Web Portal Support KB",
     *         description: "A corpus for storing knowledge base articles to troubleshoot issues in a web portal application, focusing on part-level metadata for precise query filtering.",
     *         save_history: true,
     *         encoder_name: "boomerang-2023-q3",
     *         filter_attributes: [{
     *                 name: "product",
     *                 level: "part",
     *                 description: "The product or application (portal_app).",
     *                 indexed: true,
     *                 type: "text"
     *             }, {
     *                 name: "browser",
     *                 level: "part",
     *                 description: "The browser used (chrome).",
     *                 indexed: true,
     *                 type: "text"
     *             }, {
     *                 name: "category",
     *                 level: "part",
     *                 description: "The issue category (sso, caching).",
     *                 indexed: true,
     *                 type: "text"
     *             }]
     *     })
     */
    public create(
        request: Vectara.CreateCorpusRequest,
        requestOptions?: Corpora.RequestOptions,
    ): core.HttpResponsePromise<Vectara.Corpus> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Vectara.CreateCorpusRequest,
        requestOptions?: Corpora.RequestOptions,
    ): Promise<core.WithRawResponse<Vectara.Corpus>> {
        const { "Request-Timeout": requestTimeout, "Request-Timeout-Millis": requestTimeoutMillis, ..._body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VectaraEnvironment.Production)
                        .default,
                "v2/corpora",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Request-Timeout": requestTimeout != null ? requestTimeout.toString() : undefined,
                    "Request-Timeout-Millis":
                        requestTimeoutMillis != null ? requestTimeoutMillis.toString() : undefined,
                    "x-api-key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Vectara.Corpus, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Vectara.BadRequestError(
                        _response.error.body as Vectara.BadRequestErrorBody,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Vectara.ForbiddenError(_response.error.body as Vectara.Error_, _response.rawResponse);
                case 409:
                    throw new Vectara.ConflictError(_response.error.body as Vectara.Error_, _response.rawResponse);
                default:
                    throw new errors.VectaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VectaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VectaraTimeoutError("Timeout exceeded when calling POST /v2/corpora.");
            case "unknown":
                throw new errors.VectaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get metadata about a corpus. This operation does not search the corpus contents. Specify the `corpus_key` to identify the corpus whose metadata you want to retrieve. The `corpus_key` is created when the corpus is set up, either through the Vectara Console UI or the Create Corpus API. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).
     *
     * @param {Vectara.CorpusKey} corpusKey - The unique key identifying the corpus to retrieve.
     * @param {Vectara.CorporaGetRequest} request
     * @param {Corpora.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vectara.ForbiddenError}
     * @throws {@link Vectara.NotFoundError}
     *
     * @example
     *     await client.corpora.get("my-corpus")
     */
    public get(
        corpusKey: Vectara.CorpusKey,
        request: Vectara.CorporaGetRequest = {},
        requestOptions?: Corpora.RequestOptions,
    ): core.HttpResponsePromise<Vectara.Corpus> {
        return core.HttpResponsePromise.fromPromise(this.__get(corpusKey, request, requestOptions));
    }

    private async __get(
        corpusKey: Vectara.CorpusKey,
        request: Vectara.CorporaGetRequest = {},
        requestOptions?: Corpora.RequestOptions,
    ): Promise<core.WithRawResponse<Vectara.Corpus>> {
        const { "Request-Timeout": requestTimeout, "Request-Timeout-Millis": requestTimeoutMillis } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VectaraEnvironment.Production)
                        .default,
                `v2/corpora/${encodeURIComponent(corpusKey)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Request-Timeout": requestTimeout != null ? requestTimeout.toString() : undefined,
                    "Request-Timeout-Millis":
                        requestTimeoutMillis != null ? requestTimeoutMillis.toString() : undefined,
                    "x-api-key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Vectara.Corpus, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new Vectara.ForbiddenError(_response.error.body as Vectara.Error_, _response.rawResponse);
                case 404:
                    throw new Vectara.NotFoundError(
                        _response.error.body as Vectara.NotFoundErrorBody,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.VectaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VectaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VectaraTimeoutError("Timeout exceeded when calling GET /v2/corpora/{corpus_key}.");
            case "unknown":
                throw new errors.VectaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Permanently delete a corpus and all its associated data. The `corpus_key` uniquely identifies the corpus. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).
     *
     * @param {Vectara.CorpusKey} corpusKey - The unique key identifying the corpus to delete.
     * @param {Vectara.CorporaDeleteRequest} request
     * @param {Corpora.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vectara.ForbiddenError}
     * @throws {@link Vectara.NotFoundError}
     *
     * @example
     *     await client.corpora.delete("my-corpus")
     */
    public delete(
        corpusKey: Vectara.CorpusKey,
        request: Vectara.CorporaDeleteRequest = {},
        requestOptions?: Corpora.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(corpusKey, request, requestOptions));
    }

    private async __delete(
        corpusKey: Vectara.CorpusKey,
        request: Vectara.CorporaDeleteRequest = {},
        requestOptions?: Corpora.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const { "Request-Timeout": requestTimeout, "Request-Timeout-Millis": requestTimeoutMillis } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VectaraEnvironment.Production)
                        .default,
                `v2/corpora/${encodeURIComponent(corpusKey)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Request-Timeout": requestTimeout != null ? requestTimeout.toString() : undefined,
                    "Request-Timeout-Millis":
                        requestTimeoutMillis != null ? requestTimeoutMillis.toString() : undefined,
                    "x-api-key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new Vectara.ForbiddenError(_response.error.body as Vectara.Error_, _response.rawResponse);
                case 404:
                    throw new Vectara.NotFoundError(
                        _response.error.body as Vectara.NotFoundErrorBody,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.VectaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VectaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VectaraTimeoutError("Timeout exceeded when calling DELETE /v2/corpora/{corpus_key}.");
            case "unknown":
                throw new errors.VectaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Enable, disable, or update the name and description of a corpus. This lets you manage data availability without deleting the corpus, which is useful for maintenance and security purposes. The `corpus_key` uniquely identifies the corpus. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition). Consider updating the name and description of a corpus dynamically to help keep your data aligned with changing business needs.
     *
     * @param {Vectara.CorpusKey} corpusKey - The unique key identifying the corpus to update.
     * @param {Vectara.UpdateCorpusRequest} request
     * @param {Corpora.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vectara.ForbiddenError}
     * @throws {@link Vectara.NotFoundError}
     *
     * @example
     *     await client.corpora.update("my-corpus")
     */
    public update(
        corpusKey: Vectara.CorpusKey,
        request: Vectara.UpdateCorpusRequest = {},
        requestOptions?: Corpora.RequestOptions,
    ): core.HttpResponsePromise<Vectara.Corpus> {
        return core.HttpResponsePromise.fromPromise(this.__update(corpusKey, request, requestOptions));
    }

    private async __update(
        corpusKey: Vectara.CorpusKey,
        request: Vectara.UpdateCorpusRequest = {},
        requestOptions?: Corpora.RequestOptions,
    ): Promise<core.WithRawResponse<Vectara.Corpus>> {
        const { "Request-Timeout": requestTimeout, "Request-Timeout-Millis": requestTimeoutMillis, ..._body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VectaraEnvironment.Production)
                        .default,
                `v2/corpora/${encodeURIComponent(corpusKey)}`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Request-Timeout": requestTimeout != null ? requestTimeout.toString() : undefined,
                    "Request-Timeout-Millis":
                        requestTimeoutMillis != null ? requestTimeoutMillis.toString() : undefined,
                    "x-api-key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Vectara.Corpus, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new Vectara.ForbiddenError(_response.error.body as Vectara.Error_, _response.rawResponse);
                case 404:
                    throw new Vectara.NotFoundError(
                        _response.error.body as Vectara.NotFoundErrorBody,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.VectaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VectaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VectaraTimeoutError("Timeout exceeded when calling PATCH /v2/corpora/{corpus_key}.");
            case "unknown":
                throw new errors.VectaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Resets a corpus, which removes all documents and data from the specified corpus, while keeping the corpus itself. The `corpus_key` uniquely identifies the corpus. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).
     *
     * @param {Vectara.CorpusKey} corpusKey - The unique key identifying the corpus to reset.
     * @param {Vectara.CorporaResetRequest} request
     * @param {Corpora.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vectara.ForbiddenError}
     * @throws {@link Vectara.NotFoundError}
     *
     * @example
     *     await client.corpora.reset("my-corpus")
     */
    public reset(
        corpusKey: Vectara.CorpusKey,
        request: Vectara.CorporaResetRequest = {},
        requestOptions?: Corpora.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__reset(corpusKey, request, requestOptions));
    }

    private async __reset(
        corpusKey: Vectara.CorpusKey,
        request: Vectara.CorporaResetRequest = {},
        requestOptions?: Corpora.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const { "Request-Timeout": requestTimeout, "Request-Timeout-Millis": requestTimeoutMillis } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VectaraEnvironment.Production)
                        .default,
                `v2/corpora/${encodeURIComponent(corpusKey)}/reset`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Request-Timeout": requestTimeout != null ? requestTimeout.toString() : undefined,
                    "Request-Timeout-Millis":
                        requestTimeoutMillis != null ? requestTimeoutMillis.toString() : undefined,
                    "x-api-key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new Vectara.ForbiddenError(_response.error.body as Vectara.Error_, _response.rawResponse);
                case 404:
                    throw new Vectara.NotFoundError(
                        _response.error.body as Vectara.NotFoundErrorBody,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.VectaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VectaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VectaraTimeoutError(
                    "Timeout exceeded when calling POST /v2/corpora/{corpus_key}/reset.",
                );
            case "unknown":
                throw new errors.VectaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Replace the filter attributes of a corpus. This does not happen immediately, as this operation creates a job that completes asynchronously. These new filter attributes will not work until the job completes.
     * You can monitor the status of the filter change using the returned job ID. The `corpus_key` uniquely identifies the corpus. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).
     *
     * @param {Vectara.CorpusKey} corpusKey - The unique key identifying the corpus having its filters replaced.
     * @param {Vectara.ReplaceFilterAttributesRequest} request
     * @param {Corpora.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vectara.ForbiddenError}
     * @throws {@link Vectara.NotFoundError}
     *
     * @example
     *     await client.corpora.replaceFilterAttributes("my-corpus", {
     *         filter_attributes: [{
     *                 name: "Title",
     *                 level: "document",
     *                 type: "integer"
     *             }]
     *     })
     */
    public replaceFilterAttributes(
        corpusKey: Vectara.CorpusKey,
        request: Vectara.ReplaceFilterAttributesRequest,
        requestOptions?: Corpora.RequestOptions,
    ): core.HttpResponsePromise<Vectara.ReplaceFilterAttributesResponse> {
        return core.HttpResponsePromise.fromPromise(this.__replaceFilterAttributes(corpusKey, request, requestOptions));
    }

    private async __replaceFilterAttributes(
        corpusKey: Vectara.CorpusKey,
        request: Vectara.ReplaceFilterAttributesRequest,
        requestOptions?: Corpora.RequestOptions,
    ): Promise<core.WithRawResponse<Vectara.ReplaceFilterAttributesResponse>> {
        const { "Request-Timeout": requestTimeout, "Request-Timeout-Millis": requestTimeoutMillis, ..._body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VectaraEnvironment.Production)
                        .default,
                `v2/corpora/${encodeURIComponent(corpusKey)}/replace_filter_attributes`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Request-Timeout": requestTimeout != null ? requestTimeout.toString() : undefined,
                    "Request-Timeout-Millis":
                        requestTimeoutMillis != null ? requestTimeoutMillis.toString() : undefined,
                    "x-api-key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Vectara.ReplaceFilterAttributesResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new Vectara.ForbiddenError(_response.error.body as Vectara.Error_, _response.rawResponse);
                case 404:
                    throw new Vectara.NotFoundError(
                        _response.error.body as Vectara.NotFoundErrorBody,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.VectaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VectaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VectaraTimeoutError(
                    "Timeout exceeded when calling POST /v2/corpora/{corpus_key}/replace_filter_attributes.",
                );
            case "unknown":
                throw new errors.VectaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Compute the current size of a corpus, including number of documents, parts, and characters. The `corpus_key` uniquely identifies the corpus. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).
     *
     * @param {Vectara.CorpusKey} corpusKey - The unique key identifying the corpus to compute size for.
     * @param {Vectara.CorporaComputeSizeRequest} request
     * @param {Corpora.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vectara.ForbiddenError}
     * @throws {@link Vectara.NotFoundError}
     *
     * @example
     *     await client.corpora.computeSize("my-corpus")
     */
    public computeSize(
        corpusKey: Vectara.CorpusKey,
        request: Vectara.CorporaComputeSizeRequest = {},
        requestOptions?: Corpora.RequestOptions,
    ): core.HttpResponsePromise<Vectara.ComputeCorpusSizeResponse> {
        return core.HttpResponsePromise.fromPromise(this.__computeSize(corpusKey, request, requestOptions));
    }

    private async __computeSize(
        corpusKey: Vectara.CorpusKey,
        request: Vectara.CorporaComputeSizeRequest = {},
        requestOptions?: Corpora.RequestOptions,
    ): Promise<core.WithRawResponse<Vectara.ComputeCorpusSizeResponse>> {
        const { "Request-Timeout": requestTimeout, "Request-Timeout-Millis": requestTimeoutMillis } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VectaraEnvironment.Production)
                        .default,
                `v2/corpora/${encodeURIComponent(corpusKey)}/compute_size`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Request-Timeout": requestTimeout != null ? requestTimeout.toString() : undefined,
                    "Request-Timeout-Millis":
                        requestTimeoutMillis != null ? requestTimeoutMillis.toString() : undefined,
                    "x-api-key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Vectara.ComputeCorpusSizeResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new Vectara.ForbiddenError(_response.error.body as Vectara.Error_, _response.rawResponse);
                case 404:
                    throw new Vectara.NotFoundError(
                        _response.error.body as Vectara.NotFoundErrorBody,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.VectaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VectaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VectaraTimeoutError(
                    "Timeout exceeded when calling POST /v2/corpora/{corpus_key}/compute_size.",
                );
            case "unknown":
                throw new errors.VectaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Search a single corpus with a straightforward query request, specifying the corpus key and query parameters.
     *
     * * Specify the unique `corpus_key` identifying the corpus to query. The `corpus_key` is [created in the Vectara Console UI](https://docs.vectara.com/docs/console-ui/creating-a-corpus) or the [Create Corpus API definition](https://docs.vectara.com/docs/api-reference/admin-apis/create-corpus). When creating a new corpus, you have the option to assign a custom `corpus_key` following your preferred naming convention. This key serves as a unique identifier for the corpus, allowing it to be referenced in search requests. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).
     * * Enter the search `query` string for the corpus, which is the question you want to ask.
     * * Set the maximum number of results (`limit`) to return. **Default**: 10, **minimum**: 1
     *
     * For more detailed information, see this [Query API guide](https://docs.vectara.com/docs/api-reference/search-apis/search).
     *
     * @param {Vectara.CorpusKey} corpusKey - The unique key identifying the corpus to query.
     * @param {Vectara.CorporaSearchRequest} request
     * @param {Corpora.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vectara.BadRequestError}
     * @throws {@link Vectara.ForbiddenError}
     * @throws {@link Vectara.NotFoundError}
     *
     * @example
     *     await client.corpora.search("my-corpus", {
     *         query: "query"
     *     })
     */
    public search(
        corpusKey: Vectara.CorpusKey,
        request: Vectara.CorporaSearchRequest,
        requestOptions?: Corpora.RequestOptions,
    ): core.HttpResponsePromise<Vectara.QueryFullResponse> {
        return core.HttpResponsePromise.fromPromise(this.__search(corpusKey, request, requestOptions));
    }

    private async __search(
        corpusKey: Vectara.CorpusKey,
        request: Vectara.CorporaSearchRequest,
        requestOptions?: Corpora.RequestOptions,
    ): Promise<core.WithRawResponse<Vectara.QueryFullResponse>> {
        const {
            query,
            limit,
            offset,
            save_history: saveHistory,
            intelligent_query_rewriting: intelligentQueryRewriting,
            "Request-Timeout": requestTimeout,
            "Request-Timeout-Millis": requestTimeoutMillis,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["query"] = query;
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (offset != null) {
            _queryParams["offset"] = offset.toString();
        }

        if (saveHistory != null) {
            _queryParams["save_history"] = saveHistory.toString();
        }

        if (intelligentQueryRewriting != null) {
            _queryParams["intelligent_query_rewriting"] = intelligentQueryRewriting.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VectaraEnvironment.Production)
                        .default,
                `v2/corpora/${encodeURIComponent(corpusKey)}/query`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Request-Timeout": requestTimeout != null ? requestTimeout.toString() : undefined,
                    "Request-Timeout-Millis":
                        requestTimeoutMillis != null ? requestTimeoutMillis.toString() : undefined,
                    "x-api-key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Vectara.QueryFullResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Vectara.BadRequestError(
                        _response.error.body as Vectara.BadRequestErrorBody,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Vectara.ForbiddenError(_response.error.body as Vectara.Error_, _response.rawResponse);
                case 404:
                    throw new Vectara.NotFoundError(
                        _response.error.body as Vectara.NotFoundErrorBody,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.VectaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VectaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VectaraTimeoutError(
                    "Timeout exceeded when calling GET /v2/corpora/{corpus_key}/query.",
                );
            case "unknown":
                throw new errors.VectaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Perform an advanced query on a specific corpus to find relevant results, highlight relevant snippets, and use Retrieval Augmented Generation.
     *
     * * Specify the unique `corpus_key` identifying the corpus to query. The `corpus_key` is [created in the Vectara Console UI](https://docs.vectara.com/docs/console-ui/creating-a-corpus) or the [Create Corpus API definition](https://docs.vectara.com/docs/api-reference/admin-apis/create-corpus). When creating a new corpus, you have the option to assign a custom `corpus_key` following your preferred naming convention. This key serves as a unique identifier for the corpus, allowing it to be referenced in search requests. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).
     * * Customize your search by specifying the query text (`query`), pagination details (`offset` and `limit`), and metadata filters (`metadata_filter`) to tailor your search results. [Learn more](https://docs.vectara.com/docs/api-reference/search-apis/search#query-definition)
     * * Leverage advanced search capabilities like reranking (`reranker`) and Retrieval Augmented Generation (RAG) (`generation`) for enhanced query performance. Generation is opt in by setting the `generation` property. By excluding the property or by setting it to null, the response will not include generation. [Learn more](https://docs.vectara.com/docs/learn/grounded-generation/configure-query-summarization).
     * * Use hybrid search to achieve optimal results by setting different values for `lexical_interpolation` (e.g., `0.005`). [Learn more](https://docs.vectara.com/docs/learn/hybrid-search)
     * * Specify Vectara's RAG-focused LLM (Mockingbird) for the `generation_preset_name`. [Learn more](https://docs.vectara.com/docs/learn/mockingbird-llm)
     * * Use advanced summarization options that utilize detailed summarization parameters such as `max_response_characters`, `temperature`, and `frequency_penalty` for generating precise and relevant summaries. [Learn more](https://docs.vectara.com/docs/api-reference/search-apis/search#advanced-summarization-options)
     *
     * For more detailed information, see [Query API guide](https://docs.vectara.com/docs/api-reference/search-apis/search).
     */
    public queryStream(
        corpusKey: Vectara.CorpusKey,
        request: Vectara.CorporaQueryStreamRequest,
        requestOptions?: Corpora.RequestOptions,
    ): core.HttpResponsePromise<core.Stream<Vectara.CorporaQueryStreamResponse>> {
        return core.HttpResponsePromise.fromPromise(this.__queryStream(corpusKey, request, requestOptions));
    }

    private async __queryStream(
        corpusKey: Vectara.CorpusKey,
        request: Vectara.CorporaQueryStreamRequest,
        requestOptions?: Corpora.RequestOptions,
    ): Promise<core.WithRawResponse<core.Stream<Vectara.CorporaQueryStreamResponse>>> {
        const { "Request-Timeout": requestTimeout, "Request-Timeout-Millis": requestTimeoutMillis, ..._body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)<ReadableStream>({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VectaraEnvironment.Production)
                        .default,
                `v2/corpora/${encodeURIComponent(corpusKey)}/query`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Request-Timeout": requestTimeout != null ? requestTimeout.toString() : undefined,
                    "Request-Timeout-Millis":
                        requestTimeoutMillis != null ? requestTimeoutMillis.toString() : undefined,
                    "x-api-key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: { ..._body, stream_response: true },
            responseType: "sse",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: new core.Stream({
                    stream: _response.body,
                    parse: (data) => data as any,
                    signal: requestOptions?.abortSignal,
                    eventShape: {
                        type: "sse",
                        streamTerminator: "[DONE]",
                    },
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Vectara.BadRequestError(
                        _response.error.body as Vectara.BadRequestErrorBody,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Vectara.ForbiddenError(_response.error.body as Vectara.Error_, _response.rawResponse);
                case 404:
                    throw new Vectara.NotFoundError(
                        _response.error.body as Vectara.NotFoundErrorBody,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.VectaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VectaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VectaraTimeoutError(
                    "Timeout exceeded when calling POST /v2/corpora/{corpus_key}/query.",
                );
            case "unknown":
                throw new errors.VectaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Perform an advanced query on a specific corpus to find relevant results, highlight relevant snippets, and use Retrieval Augmented Generation.
     *
     * * Specify the unique `corpus_key` identifying the corpus to query. The `corpus_key` is [created in the Vectara Console UI](https://docs.vectara.com/docs/console-ui/creating-a-corpus) or the [Create Corpus API definition](https://docs.vectara.com/docs/api-reference/admin-apis/create-corpus). When creating a new corpus, you have the option to assign a custom `corpus_key` following your preferred naming convention. This key serves as a unique identifier for the corpus, allowing it to be referenced in search requests. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).
     * * Customize your search by specifying the query text (`query`), pagination details (`offset` and `limit`), and metadata filters (`metadata_filter`) to tailor your search results. [Learn more](https://docs.vectara.com/docs/api-reference/search-apis/search#query-definition)
     * * Leverage advanced search capabilities like reranking (`reranker`) and Retrieval Augmented Generation (RAG) (`generation`) for enhanced query performance. Generation is opt in by setting the `generation` property. By excluding the property or by setting it to null, the response will not include generation. [Learn more](https://docs.vectara.com/docs/learn/grounded-generation/configure-query-summarization).
     * * Use hybrid search to achieve optimal results by setting different values for `lexical_interpolation` (e.g., `0.005`). [Learn more](https://docs.vectara.com/docs/learn/hybrid-search)
     * * Specify Vectara's RAG-focused LLM (Mockingbird) for the `generation_preset_name`. [Learn more](https://docs.vectara.com/docs/learn/mockingbird-llm)
     * * Use advanced summarization options that utilize detailed summarization parameters such as `max_response_characters`, `temperature`, and `frequency_penalty` for generating precise and relevant summaries. [Learn more](https://docs.vectara.com/docs/api-reference/search-apis/search#advanced-summarization-options)
     *
     * For more detailed information, see [Query API guide](https://docs.vectara.com/docs/api-reference/search-apis/search).
     *
     * @param {Vectara.CorpusKey} corpusKey - The unique key identifying the corpus to query.
     * @param {Vectara.CorporaQueryRequest} request
     * @param {Corpora.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vectara.BadRequestError}
     * @throws {@link Vectara.ForbiddenError}
     * @throws {@link Vectara.NotFoundError}
     *
     * @example
     *     await client.corpora.query("my-corpus", {
     *         query: "How to configure OAuth2 for microservices in Kubernetes?",
     *         search: {
     *             limit: 50,
     *             context_configuration: {
     *                 sentences_before: 2,
     *                 sentences_after: 2,
     *                 start_tag: "<em>",
     *                 end_tag: "</em>"
     *             },
     *             reranker: {
     *                 type: "customer_reranker",
     *                 reranker_name: "Rerank_Multilingual_v1",
     *                 limit: 50,
     *                 include_context: true
     *             },
     *             metadata_filter: "doc.topic = 'authentication' and doc.platform = 'kubernetes'",
     *             lexical_interpolation: 0.005
     *         },
     *         generation: {
     *             generation_preset_name: "vectara-summary-ext-24-05-med-omni",
     *             max_used_search_results: 10,
     *             citations: {
     *                 style: "markdown",
     *                 url_pattern: "https://vectara.com/documents/{doc.id}",
     *                 text_pattern: "{doc.title}"
     *             }
     *         },
     *         save_history: true,
     *         intelligent_query_rewriting: true
     *     })
     */
    public query(
        corpusKey: Vectara.CorpusKey,
        request: Vectara.CorporaQueryRequest,
        requestOptions?: Corpora.RequestOptions,
    ): core.HttpResponsePromise<Vectara.CorporaQueryResponse> {
        return core.HttpResponsePromise.fromPromise(this.__query(corpusKey, request, requestOptions));
    }

    private async __query(
        corpusKey: Vectara.CorpusKey,
        request: Vectara.CorporaQueryRequest,
        requestOptions?: Corpora.RequestOptions,
    ): Promise<core.WithRawResponse<Vectara.CorporaQueryResponse>> {
        const { "Request-Timeout": requestTimeout, "Request-Timeout-Millis": requestTimeoutMillis, ..._body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VectaraEnvironment.Production)
                        .default,
                `v2/corpora/${encodeURIComponent(corpusKey)}/query`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Request-Timeout": requestTimeout != null ? requestTimeout.toString() : undefined,
                    "Request-Timeout-Millis":
                        requestTimeoutMillis != null ? requestTimeoutMillis.toString() : undefined,
                    "x-api-key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: { ..._body, stream_response: false },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Vectara.CorporaQueryResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Vectara.BadRequestError(
                        _response.error.body as Vectara.BadRequestErrorBody,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Vectara.ForbiddenError(_response.error.body as Vectara.Error_, _response.rawResponse);
                case 404:
                    throw new Vectara.NotFoundError(
                        _response.error.body as Vectara.NotFoundErrorBody,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.VectaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VectaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VectaraTimeoutError(
                    "Timeout exceeded when calling POST /v2/corpora/{corpus_key}/query.",
                );
            case "unknown":
                throw new errors.VectaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
