/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Vectara from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace HallucinationCorrectors {
    export interface Options {
        environment?: core.Supplier<environments.VectaraEnvironment | environments.VectaraEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the x-api-key header */
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

/**
 * API for managing hallucination correction, including listing available models and correcting hallucinated content in generated text
 */
export class HallucinationCorrectors {
    protected readonly _options: HallucinationCorrectors.Options;

    constructor(_options: HallucinationCorrectors.Options = {}) {
        this._options = _options;
    }

    /**
     * Retrieves a list of available hallucination correctors used for detecting and correcting hallucinations in AI-generated content. This endpoint supports filtering by name or description, pagination, and metadata for navigating large result sets.
     *
     * @param {Vectara.HallucinationCorrectorsListRequest} request
     * @param {HallucinationCorrectors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vectara.ForbiddenError}
     *
     * @example
     *     await client.hallucinationCorrectors.list()
     */
    public async list(
        request: Vectara.HallucinationCorrectorsListRequest = {},
        requestOptions?: HallucinationCorrectors.RequestOptions,
    ): Promise<core.Page<Vectara.HallucinationCorrector>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Vectara.HallucinationCorrectorsListRequest,
            ): Promise<core.WithRawResponse<Vectara.ListHallucinationCorrectorsResponse>> => {
                const {
                    filter,
                    limit,
                    page_key: pageKey,
                    "Request-Timeout": requestTimeout,
                    "Request-Timeout-Millis": requestTimeoutMillis,
                } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (filter != null) {
                    _queryParams["filter"] = filter;
                }
                if (limit != null) {
                    _queryParams["limit"] = limit.toString();
                }
                if (pageKey != null) {
                    _queryParams["page_key"] = pageKey;
                }
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (
                                (await core.Supplier.get(this._options.environment)) ??
                                environments.VectaraEnvironment.Production
                            ).default,
                        "v2/hallucination_correctors",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "Request-Timeout": requestTimeout != null ? requestTimeout.toString() : undefined,
                            "Request-Timeout-Millis":
                                requestTimeoutMillis != null ? requestTimeoutMillis.toString() : undefined,
                            "x-api-key": requestOptions?.apiKey,
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as Vectara.ListHallucinationCorrectorsResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 403:
                            throw new Vectara.ForbiddenError(
                                _response.error.body as Vectara.Error_,
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.VectaraError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.VectaraError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.VectaraTimeoutError(
                            "Timeout exceeded when calling GET /v2/hallucination_correctors.",
                        );
                    case "unknown":
                        throw new errors.VectaraError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Vectara.ListHallucinationCorrectorsResponse, Vectara.HallucinationCorrector>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.metadata?.page_key != null &&
                !(typeof response?.metadata?.page_key === "string" && response?.metadata?.page_key === ""),
            getItems: (response) => response?.hallucination_correctors ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "page_key", response?.metadata?.page_key));
            },
        });
    }

    /**
     * This endpoint identifies information in generated text that is not supported by the provided source documents and offers corrections with minimal changes. This can be used standalone or as part of a RAG workflow where the HHEM score indicates potential hallucinations.
     *
     * @param {Vectara.HallucinationCorrectionRequest} request
     * @param {HallucinationCorrectors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vectara.BadRequestError}
     * @throws {@link Vectara.ForbiddenError}
     *
     * @example
     *     await client.hallucinationCorrectors.hallucinationCorrection({
     *         generated_text: "generated_text",
     *         documents: [{
     *                 text: "text"
     *             }],
     *         model_name: "vhc-large-10"
     *     })
     */
    public hallucinationCorrection(
        request: Vectara.HallucinationCorrectionRequest,
        requestOptions?: HallucinationCorrectors.RequestOptions,
    ): core.HttpResponsePromise<Vectara.HallucinationCorrectionResponse> {
        return core.HttpResponsePromise.fromPromise(this.__hallucinationCorrection(request, requestOptions));
    }

    private async __hallucinationCorrection(
        request: Vectara.HallucinationCorrectionRequest,
        requestOptions?: HallucinationCorrectors.RequestOptions,
    ): Promise<core.WithRawResponse<Vectara.HallucinationCorrectionResponse>> {
        const { "Request-Timeout": requestTimeout, "Request-Timeout-Millis": requestTimeoutMillis, ..._body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VectaraEnvironment.Production)
                        .default,
                "v2/hallucination_correctors/correct_hallucinations",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Request-Timeout": requestTimeout != null ? requestTimeout.toString() : undefined,
                    "Request-Timeout-Millis":
                        requestTimeoutMillis != null ? requestTimeoutMillis.toString() : undefined,
                    "x-api-key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Vectara.HallucinationCorrectionResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Vectara.BadRequestError(
                        _response.error.body as Vectara.BadRequestErrorBody,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Vectara.ForbiddenError(_response.error.body as Vectara.Error_, _response.rawResponse);
                default:
                    throw new errors.VectaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VectaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VectaraTimeoutError(
                    "Timeout exceeded when calling POST /v2/hallucination_correctors/correct_hallucinations.",
                );
            case "unknown":
                throw new errors.VectaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
