/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Vectara from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace QueryHistory {
    export interface Options {
        environment?: core.Supplier<environments.VectaraEnvironment | environments.VectaraEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the x-api-key header */
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

/**
 * Retrieve and manage the history of previous queries for analytics and auditing
 */
export class QueryHistory {
    protected readonly _options: QueryHistory.Options;

    constructor(_options: QueryHistory.Options = {}) {
        this._options = _options;
    }

    /**
     * Retrieve a detailed history of previously executed query.
     *
     * @param {string} queryId - The ID of the query history
     * @param {Vectara.QueryHistoryGetRequest} request
     * @param {QueryHistory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vectara.ForbiddenError}
     * @throws {@link Vectara.NotFoundError}
     *
     * @example
     *     await client.queryHistory.get("query_id")
     */
    public get(
        queryId: string,
        request: Vectara.QueryHistoryGetRequest = {},
        requestOptions?: QueryHistory.RequestOptions,
    ): core.HttpResponsePromise<Vectara.QueryHistory> {
        return core.HttpResponsePromise.fromPromise(this.__get(queryId, request, requestOptions));
    }

    private async __get(
        queryId: string,
        request: Vectara.QueryHistoryGetRequest = {},
        requestOptions?: QueryHistory.RequestOptions,
    ): Promise<core.WithRawResponse<Vectara.QueryHistory>> {
        const { "Request-Timeout": requestTimeout, "Request-Timeout-Millis": requestTimeoutMillis } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VectaraEnvironment.Production)
                        .default,
                `v2/queries/${encodeURIComponent(queryId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Request-Timeout": requestTimeout != null ? requestTimeout.toString() : undefined,
                    "Request-Timeout-Millis":
                        requestTimeoutMillis != null ? requestTimeoutMillis.toString() : undefined,
                    "x-api-key": requestOptions?.apiKey,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Vectara.QueryHistory, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new Vectara.ForbiddenError(_response.error.body as Vectara.Error_, _response.rawResponse);
                case 404:
                    throw new Vectara.NotFoundError(
                        _response.error.body as Vectara.NotFoundErrorBody,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.VectaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VectaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VectaraTimeoutError("Timeout exceeded when calling GET /v2/queries/{query_id}.");
            case "unknown":
                throw new errors.VectaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve query histories.
     *
     * @param {Vectara.QueryHistoryListRequest} request
     * @param {QueryHistory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vectara.BadRequestError}
     * @throws {@link Vectara.ForbiddenError}
     *
     * @example
     *     await client.queryHistory.list()
     */
    public async list(
        request: Vectara.QueryHistoryListRequest = {},
        requestOptions?: QueryHistory.RequestOptions,
    ): Promise<core.Page<Vectara.QueryHistorySummary>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Vectara.QueryHistoryListRequest,
            ): Promise<core.WithRawResponse<Vectara.ListQueryHistoriesResponse>> => {
                const {
                    corpus_key: corpusKey,
                    started_after: startedAfter,
                    started_before: startedBefore,
                    chat_id: chatId,
                    limit,
                    page_key: pageKey,
                    "Request-Timeout": requestTimeout,
                    "Request-Timeout-Millis": requestTimeoutMillis,
                } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (corpusKey != null) {
                    _queryParams["corpus_key"] = corpusKey;
                }
                if (startedAfter != null) {
                    _queryParams["started_after"] = startedAfter;
                }
                if (startedBefore != null) {
                    _queryParams["started_before"] = startedBefore;
                }
                if (chatId != null) {
                    _queryParams["chat_id"] = chatId;
                }
                if (limit != null) {
                    _queryParams["limit"] = limit.toString();
                }
                if (pageKey != null) {
                    _queryParams["page_key"] = pageKey;
                }
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (
                                (await core.Supplier.get(this._options.environment)) ??
                                environments.VectaraEnvironment.Production
                            ).default,
                        "v2/queries",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "Request-Timeout": requestTimeout != null ? requestTimeout.toString() : undefined,
                            "Request-Timeout-Millis":
                                requestTimeoutMillis != null ? requestTimeoutMillis.toString() : undefined,
                            "x-api-key": requestOptions?.apiKey,
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as Vectara.ListQueryHistoriesResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 400:
                            throw new Vectara.BadRequestError(
                                _response.error.body as Vectara.BadRequestErrorBody,
                                _response.rawResponse,
                            );
                        case 403:
                            throw new Vectara.ForbiddenError(
                                _response.error.body as Vectara.Error_,
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.VectaraError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.VectaraError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.VectaraTimeoutError("Timeout exceeded when calling GET /v2/queries.");
                    case "unknown":
                        throw new errors.VectaraError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Vectara.ListQueryHistoriesResponse, Vectara.QueryHistorySummary>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.metadata?.page_key != null &&
                !(typeof response?.metadata?.page_key === "string" && response?.metadata?.page_key === ""),
            getItems: (response) => response?.queries ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "page_key", response?.metadata?.page_key));
            },
        });
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
